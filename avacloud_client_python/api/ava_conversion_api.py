# coding: utf-8

"""
    AVACloud API 1.5.3

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.5.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from avacloud_client_python.api_client import ApiClient


class AvaConversionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ava_conversion_convert_to_excel(self, ava_project, **kwargs):  # noqa: E501
        """Converts Dangl.AVA projects to Excel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ava_conversion_convert_to_excel(ava_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectDto ava_project: The Dangl.AVA project (required)
        :param bool write_prices: Defaults to true
        :param bool write_long_texts: Defaults to true
        :param str conversion_culture: The culture that should be used for the conversion process, to have localized Excel files
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ava_conversion_convert_to_excel_with_http_info(ava_project, **kwargs)  # noqa: E501
        else:
            (data) = self.ava_conversion_convert_to_excel_with_http_info(ava_project, **kwargs)  # noqa: E501
            return data

    def ava_conversion_convert_to_excel_with_http_info(self, ava_project, **kwargs):  # noqa: E501
        """Converts Dangl.AVA projects to Excel  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ava_conversion_convert_to_excel_with_http_info(ava_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectDto ava_project: The Dangl.AVA project (required)
        :param bool write_prices: Defaults to true
        :param bool write_long_texts: Defaults to true
        :param str conversion_culture: The culture that should be used for the conversion process, to have localized Excel files
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ava_project', 'write_prices', 'write_long_texts', 'conversion_culture']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ava_conversion_convert_to_excel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ava_project' is set
        if ('ava_project' not in params or
                params['ava_project'] is None):
            raise ValueError("Missing the required parameter `ava_project` when calling `ava_conversion_convert_to_excel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'write_prices' in params:
            query_params.append(('WritePrices', params['write_prices']))  # noqa: E501
        if 'write_long_texts' in params:
            query_params.append(('WriteLongTexts', params['write_long_texts']))  # noqa: E501
        if 'conversion_culture' in params:
            query_params.append(('ConversionCulture', params['conversion_culture']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ava_project' in params:
            body_params = params['ava_project']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Dangl.Identity']  # noqa: E501

        return self.api_client.call_api(
            '/conversion/ava/excel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ava_conversion_convert_to_gaeb(self, ava_project, **kwargs):  # noqa: E501
        """Converts Dangl.AVA projects to GAEB  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ava_conversion_convert_to_gaeb(ava_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectDto ava_project: The Dangl.AVA project (required)
        :param str destination_gaeb_type: Defaults to GAEB XML V3.2
        :param str target_exchange_phase_transform: Defaults to none, meaning no transformation will be done
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ava_conversion_convert_to_gaeb_with_http_info(ava_project, **kwargs)  # noqa: E501
        else:
            (data) = self.ava_conversion_convert_to_gaeb_with_http_info(ava_project, **kwargs)  # noqa: E501
            return data

    def ava_conversion_convert_to_gaeb_with_http_info(self, ava_project, **kwargs):  # noqa: E501
        """Converts Dangl.AVA projects to GAEB  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ava_conversion_convert_to_gaeb_with_http_info(ava_project, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProjectDto ava_project: The Dangl.AVA project (required)
        :param str destination_gaeb_type: Defaults to GAEB XML V3.2
        :param str target_exchange_phase_transform: Defaults to none, meaning no transformation will be done
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ava_project', 'destination_gaeb_type', 'target_exchange_phase_transform']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ava_conversion_convert_to_gaeb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ava_project' is set
        if ('ava_project' not in params or
                params['ava_project'] is None):
            raise ValueError("Missing the required parameter `ava_project` when calling `ava_conversion_convert_to_gaeb`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'destination_gaeb_type' in params:
            query_params.append(('DestinationGaebType', params['destination_gaeb_type']))  # noqa: E501
        if 'target_exchange_phase_transform' in params:
            query_params.append(('TargetExchangePhaseTransform', params['target_exchange_phase_transform']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ava_project' in params:
            body_params = params['ava_project']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Dangl.Identity']  # noqa: E501

        return self.api_client.call_api(
            '/conversion/ava/gaeb', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
