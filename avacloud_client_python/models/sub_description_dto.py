# coding: utf-8

"""
    AVACloud API 1.5.3

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.5.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.models.addition_type_dto import AdditionTypeDto  # noqa: F401,E501
from avacloud_client_python.models.calculation_dto import CalculationDto  # noqa: F401,E501


class SubDescriptionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'quantity': 'float',
        'quantity_components': 'list[CalculationDto]',
        'amount_to_be_entered_by_bidder': 'bool',
        'identifier': 'str',
        'short_text': 'str',
        'long_text': 'str',
        'html_long_text': 'str',
        'addition_type': 'AdditionTypeDto'
    }

    attribute_map = {
        'id': 'id',
        'quantity': 'quantity',
        'quantity_components': 'quantityComponents',
        'amount_to_be_entered_by_bidder': 'amountToBeEnteredByBidder',
        'identifier': 'identifier',
        'short_text': 'shortText',
        'long_text': 'longText',
        'html_long_text': 'htmlLongText',
        'addition_type': 'additionType'
    }

    def __init__(self, id=None, quantity=None, quantity_components=None, amount_to_be_entered_by_bidder=None, identifier=None, short_text=None, long_text=None, html_long_text=None, addition_type=None):  # noqa: E501
        """SubDescriptionDto - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._quantity = None
        self._quantity_components = None
        self._amount_to_be_entered_by_bidder = None
        self._identifier = None
        self._short_text = None
        self._long_text = None
        self._html_long_text = None
        self._addition_type = None
        self.discriminator = None

        self.id = id
        self.quantity = quantity
        if quantity_components is not None:
            self.quantity_components = quantity_components
        self.amount_to_be_entered_by_bidder = amount_to_be_entered_by_bidder
        if identifier is not None:
            self.identifier = identifier
        if short_text is not None:
            self.short_text = short_text
        if long_text is not None:
            self.long_text = long_text
        if html_long_text is not None:
            self.html_long_text = html_long_text
        self.addition_type = addition_type

    @property
    def id(self):
        """Gets the id of this SubDescriptionDto.  # noqa: E501


        :return: The id of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubDescriptionDto.


        :param id: The id of this SubDescriptionDto.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def quantity(self):
        """Gets the quantity of this SubDescriptionDto.  # noqa: E501


        :return: The quantity of this SubDescriptionDto.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SubDescriptionDto.


        :param quantity: The quantity of this SubDescriptionDto.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def quantity_components(self):
        """Gets the quantity_components of this SubDescriptionDto.  # noqa: E501


        :return: The quantity_components of this SubDescriptionDto.  # noqa: E501
        :rtype: list[CalculationDto]
        """
        return self._quantity_components

    @quantity_components.setter
    def quantity_components(self, quantity_components):
        """Sets the quantity_components of this SubDescriptionDto.


        :param quantity_components: The quantity_components of this SubDescriptionDto.  # noqa: E501
        :type: list[CalculationDto]
        """

        self._quantity_components = quantity_components

    @property
    def amount_to_be_entered_by_bidder(self):
        """Gets the amount_to_be_entered_by_bidder of this SubDescriptionDto.  # noqa: E501


        :return: The amount_to_be_entered_by_bidder of this SubDescriptionDto.  # noqa: E501
        :rtype: bool
        """
        return self._amount_to_be_entered_by_bidder

    @amount_to_be_entered_by_bidder.setter
    def amount_to_be_entered_by_bidder(self, amount_to_be_entered_by_bidder):
        """Sets the amount_to_be_entered_by_bidder of this SubDescriptionDto.


        :param amount_to_be_entered_by_bidder: The amount_to_be_entered_by_bidder of this SubDescriptionDto.  # noqa: E501
        :type: bool
        """
        if amount_to_be_entered_by_bidder is None:
            raise ValueError("Invalid value for `amount_to_be_entered_by_bidder`, must not be `None`")  # noqa: E501

        self._amount_to_be_entered_by_bidder = amount_to_be_entered_by_bidder

    @property
    def identifier(self):
        """Gets the identifier of this SubDescriptionDto.  # noqa: E501


        :return: The identifier of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this SubDescriptionDto.


        :param identifier: The identifier of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def short_text(self):
        """Gets the short_text of this SubDescriptionDto.  # noqa: E501


        :return: The short_text of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._short_text

    @short_text.setter
    def short_text(self, short_text):
        """Sets the short_text of this SubDescriptionDto.


        :param short_text: The short_text of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._short_text = short_text

    @property
    def long_text(self):
        """Gets the long_text of this SubDescriptionDto.  # noqa: E501


        :return: The long_text of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._long_text

    @long_text.setter
    def long_text(self, long_text):
        """Sets the long_text of this SubDescriptionDto.


        :param long_text: The long_text of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._long_text = long_text

    @property
    def html_long_text(self):
        """Gets the html_long_text of this SubDescriptionDto.  # noqa: E501


        :return: The html_long_text of this SubDescriptionDto.  # noqa: E501
        :rtype: str
        """
        return self._html_long_text

    @html_long_text.setter
    def html_long_text(self, html_long_text):
        """Sets the html_long_text of this SubDescriptionDto.


        :param html_long_text: The html_long_text of this SubDescriptionDto.  # noqa: E501
        :type: str
        """

        self._html_long_text = html_long_text

    @property
    def addition_type(self):
        """Gets the addition_type of this SubDescriptionDto.  # noqa: E501


        :return: The addition_type of this SubDescriptionDto.  # noqa: E501
        :rtype: AdditionTypeDto
        """
        return self._addition_type

    @addition_type.setter
    def addition_type(self, addition_type):
        """Sets the addition_type of this SubDescriptionDto.


        :param addition_type: The addition_type of this SubDescriptionDto.  # noqa: E501
        :type: AdditionTypeDto
        """
        if addition_type is None:
            raise ValueError("Invalid value for `addition_type`, must not be `None`")  # noqa: E501

        self._addition_type = addition_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubDescriptionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubDescriptionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
