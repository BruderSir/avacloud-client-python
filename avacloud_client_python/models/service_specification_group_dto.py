# coding: utf-8

"""
    AVACloud API 1.4.1

    AVACloud API specification  # noqa: E501

    OpenAPI spec version: 1.4.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from avacloud_client_python.models.comission_status_dto import ComissionStatusDto  # noqa: F401,E501
from avacloud_client_python.models.gross_price_component_dto import GrossPriceComponentDto  # noqa: F401,E501
from avacloud_client_python.models.i_element_dto import IElementDto  # noqa: F401,E501
from avacloud_client_python.models.item_number_dto import ItemNumberDto  # noqa: F401,E501
from avacloud_client_python.models.item_number_schema_dto import ItemNumberSchemaDto  # noqa: F401,E501
from avacloud_client_python.models.price_type_dto import PriceTypeDto  # noqa: F401,E501


class ServiceSpecificationGroupDto(IElementDto):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_hourly_wage': 'float',
        'project_tax_rate': 'float',
        'project_price_components': 'list[str]',
        'project_item_number_schema': 'ItemNumberSchemaDto',
        'elements': 'list[IElementDto]',
        'project_labour_time_label': 'str',
        'contains_duplicate_item_numbers': 'bool',
        'ignore_duplicate_item_numbers': 'bool',
        'total_price_gross_by_tax_rate': 'list[GrossPriceComponentDto]',
        'ignore_child_price_updates': 'bool',
        'deducted_price': 'float',
        'deduction_factor': 'float',
        'total_price': 'float',
        'total_price_gross': 'float',
        'total_price_gross_deducted': 'float',
        'price_type': 'PriceTypeDto',
        'short_text': 'str',
        'comission_status': 'ComissionStatusDto',
        'item_number': 'ItemNumberDto',
        'element_type': 'str',
        'is_lot': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'project_hourly_wage': 'projectHourlyWage',
        'project_tax_rate': 'projectTaxRate',
        'project_price_components': 'projectPriceComponents',
        'project_item_number_schema': 'projectItemNumberSchema',
        'elements': 'elements',
        'project_labour_time_label': 'projectLabourTimeLabel',
        'contains_duplicate_item_numbers': 'containsDuplicateItemNumbers',
        'ignore_duplicate_item_numbers': 'ignoreDuplicateItemNumbers',
        'total_price_gross_by_tax_rate': 'totalPriceGrossByTaxRate',
        'ignore_child_price_updates': 'ignoreChildPriceUpdates',
        'deducted_price': 'deductedPrice',
        'deduction_factor': 'deductionFactor',
        'total_price': 'totalPrice',
        'total_price_gross': 'totalPriceGross',
        'total_price_gross_deducted': 'totalPriceGrossDeducted',
        'price_type': 'priceType',
        'short_text': 'shortText',
        'comission_status': 'comissionStatus',
        'item_number': 'itemNumber',
        'element_type': 'elementType',
        'is_lot': 'isLot',
        'type': 'type'
    }

    def __init__(self, project_hourly_wage=None, project_tax_rate=None, project_price_components=None, project_item_number_schema=None, elements=None, project_labour_time_label=None, contains_duplicate_item_numbers=None, ignore_duplicate_item_numbers=None, total_price_gross_by_tax_rate=None, ignore_child_price_updates=None, deducted_price=None, deduction_factor=None, total_price=None, total_price_gross=None, total_price_gross_deducted=None, price_type=None, short_text=None, comission_status=None, item_number=None, element_type=None, is_lot=None, type=None):  # noqa: E501
        """ServiceSpecificationGroupDto - a model defined in Swagger"""  # noqa: E501

        self._project_hourly_wage = None
        self._project_tax_rate = None
        self._project_price_components = None
        self._project_item_number_schema = None
        self._elements = None
        self._project_labour_time_label = None
        self._contains_duplicate_item_numbers = None
        self._ignore_duplicate_item_numbers = None
        self._total_price_gross_by_tax_rate = None
        self._ignore_child_price_updates = None
        self._deducted_price = None
        self._deduction_factor = None
        self._total_price = None
        self._total_price_gross = None
        self._total_price_gross_deducted = None
        self._price_type = None
        self._short_text = None
        self._comission_status = None
        self._item_number = None
        self._element_type = None
        self._is_lot = None
        self._type = None
        self.discriminator = None

        self.project_hourly_wage = project_hourly_wage
        self.project_tax_rate = project_tax_rate
        if project_price_components is not None:
            self.project_price_components = project_price_components
        if project_item_number_schema is not None:
            self.project_item_number_schema = project_item_number_schema
        if elements is not None:
            self.elements = elements
        if project_labour_time_label is not None:
            self.project_labour_time_label = project_labour_time_label
        self.contains_duplicate_item_numbers = contains_duplicate_item_numbers
        self.ignore_duplicate_item_numbers = ignore_duplicate_item_numbers
        if total_price_gross_by_tax_rate is not None:
            self.total_price_gross_by_tax_rate = total_price_gross_by_tax_rate
        self.ignore_child_price_updates = ignore_child_price_updates
        self.deducted_price = deducted_price
        self.deduction_factor = deduction_factor
        self.total_price = total_price
        self.total_price_gross = total_price_gross
        self.total_price_gross_deducted = total_price_gross_deducted
        self.price_type = price_type
        if short_text is not None:
            self.short_text = short_text
        self.comission_status = comission_status
        if item_number is not None:
            self.item_number = item_number
        if element_type is not None:
            self.element_type = element_type
        self.is_lot = is_lot
        if type is not None:
            self.type = type

    @property
    def project_hourly_wage(self):
        """Gets the project_hourly_wage of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The project_hourly_wage of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._project_hourly_wage

    @project_hourly_wage.setter
    def project_hourly_wage(self, project_hourly_wage):
        """Sets the project_hourly_wage of this ServiceSpecificationGroupDto.


        :param project_hourly_wage: The project_hourly_wage of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if project_hourly_wage is None:
            raise ValueError("Invalid value for `project_hourly_wage`, must not be `None`")  # noqa: E501

        self._project_hourly_wage = project_hourly_wage

    @property
    def project_tax_rate(self):
        """Gets the project_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The project_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._project_tax_rate

    @project_tax_rate.setter
    def project_tax_rate(self, project_tax_rate):
        """Sets the project_tax_rate of this ServiceSpecificationGroupDto.


        :param project_tax_rate: The project_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if project_tax_rate is None:
            raise ValueError("Invalid value for `project_tax_rate`, must not be `None`")  # noqa: E501

        self._project_tax_rate = project_tax_rate

    @property
    def project_price_components(self):
        """Gets the project_price_components of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The project_price_components of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_price_components

    @project_price_components.setter
    def project_price_components(self, project_price_components):
        """Sets the project_price_components of this ServiceSpecificationGroupDto.


        :param project_price_components: The project_price_components of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: list[str]
        """

        self._project_price_components = project_price_components

    @property
    def project_item_number_schema(self):
        """Gets the project_item_number_schema of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The project_item_number_schema of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: ItemNumberSchemaDto
        """
        return self._project_item_number_schema

    @project_item_number_schema.setter
    def project_item_number_schema(self, project_item_number_schema):
        """Sets the project_item_number_schema of this ServiceSpecificationGroupDto.


        :param project_item_number_schema: The project_item_number_schema of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: ItemNumberSchemaDto
        """

        self._project_item_number_schema = project_item_number_schema

    @property
    def elements(self):
        """Gets the elements of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The elements of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: list[IElementDto]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this ServiceSpecificationGroupDto.


        :param elements: The elements of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: list[IElementDto]
        """

        self._elements = elements

    @property
    def project_labour_time_label(self):
        """Gets the project_labour_time_label of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The project_labour_time_label of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._project_labour_time_label

    @project_labour_time_label.setter
    def project_labour_time_label(self, project_labour_time_label):
        """Sets the project_labour_time_label of this ServiceSpecificationGroupDto.


        :param project_labour_time_label: The project_labour_time_label of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: str
        """

        self._project_labour_time_label = project_labour_time_label

    @property
    def contains_duplicate_item_numbers(self):
        """Gets the contains_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The contains_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._contains_duplicate_item_numbers

    @contains_duplicate_item_numbers.setter
    def contains_duplicate_item_numbers(self, contains_duplicate_item_numbers):
        """Sets the contains_duplicate_item_numbers of this ServiceSpecificationGroupDto.


        :param contains_duplicate_item_numbers: The contains_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if contains_duplicate_item_numbers is None:
            raise ValueError("Invalid value for `contains_duplicate_item_numbers`, must not be `None`")  # noqa: E501

        self._contains_duplicate_item_numbers = contains_duplicate_item_numbers

    @property
    def ignore_duplicate_item_numbers(self):
        """Gets the ignore_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The ignore_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_duplicate_item_numbers

    @ignore_duplicate_item_numbers.setter
    def ignore_duplicate_item_numbers(self, ignore_duplicate_item_numbers):
        """Sets the ignore_duplicate_item_numbers of this ServiceSpecificationGroupDto.


        :param ignore_duplicate_item_numbers: The ignore_duplicate_item_numbers of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if ignore_duplicate_item_numbers is None:
            raise ValueError("Invalid value for `ignore_duplicate_item_numbers`, must not be `None`")  # noqa: E501

        self._ignore_duplicate_item_numbers = ignore_duplicate_item_numbers

    @property
    def total_price_gross_by_tax_rate(self):
        """Gets the total_price_gross_by_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The total_price_gross_by_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: list[GrossPriceComponentDto]
        """
        return self._total_price_gross_by_tax_rate

    @total_price_gross_by_tax_rate.setter
    def total_price_gross_by_tax_rate(self, total_price_gross_by_tax_rate):
        """Sets the total_price_gross_by_tax_rate of this ServiceSpecificationGroupDto.


        :param total_price_gross_by_tax_rate: The total_price_gross_by_tax_rate of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: list[GrossPriceComponentDto]
        """

        self._total_price_gross_by_tax_rate = total_price_gross_by_tax_rate

    @property
    def ignore_child_price_updates(self):
        """Gets the ignore_child_price_updates of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The ignore_child_price_updates of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_child_price_updates

    @ignore_child_price_updates.setter
    def ignore_child_price_updates(self, ignore_child_price_updates):
        """Sets the ignore_child_price_updates of this ServiceSpecificationGroupDto.


        :param ignore_child_price_updates: The ignore_child_price_updates of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if ignore_child_price_updates is None:
            raise ValueError("Invalid value for `ignore_child_price_updates`, must not be `None`")  # noqa: E501

        self._ignore_child_price_updates = ignore_child_price_updates

    @property
    def deducted_price(self):
        """Gets the deducted_price of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The deducted_price of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._deducted_price

    @deducted_price.setter
    def deducted_price(self, deducted_price):
        """Sets the deducted_price of this ServiceSpecificationGroupDto.


        :param deducted_price: The deducted_price of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if deducted_price is None:
            raise ValueError("Invalid value for `deducted_price`, must not be `None`")  # noqa: E501

        self._deducted_price = deducted_price

    @property
    def deduction_factor(self):
        """Gets the deduction_factor of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The deduction_factor of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._deduction_factor

    @deduction_factor.setter
    def deduction_factor(self, deduction_factor):
        """Sets the deduction_factor of this ServiceSpecificationGroupDto.


        :param deduction_factor: The deduction_factor of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if deduction_factor is None:
            raise ValueError("Invalid value for `deduction_factor`, must not be `None`")  # noqa: E501

        self._deduction_factor = deduction_factor

    @property
    def total_price(self):
        """Gets the total_price of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The total_price of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this ServiceSpecificationGroupDto.


        :param total_price: The total_price of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")  # noqa: E501

        self._total_price = total_price

    @property
    def total_price_gross(self):
        """Gets the total_price_gross of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The total_price_gross of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._total_price_gross

    @total_price_gross.setter
    def total_price_gross(self, total_price_gross):
        """Sets the total_price_gross of this ServiceSpecificationGroupDto.


        :param total_price_gross: The total_price_gross of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if total_price_gross is None:
            raise ValueError("Invalid value for `total_price_gross`, must not be `None`")  # noqa: E501

        self._total_price_gross = total_price_gross

    @property
    def total_price_gross_deducted(self):
        """Gets the total_price_gross_deducted of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The total_price_gross_deducted of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: float
        """
        return self._total_price_gross_deducted

    @total_price_gross_deducted.setter
    def total_price_gross_deducted(self, total_price_gross_deducted):
        """Sets the total_price_gross_deducted of this ServiceSpecificationGroupDto.


        :param total_price_gross_deducted: The total_price_gross_deducted of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: float
        """
        if total_price_gross_deducted is None:
            raise ValueError("Invalid value for `total_price_gross_deducted`, must not be `None`")  # noqa: E501

        self._total_price_gross_deducted = total_price_gross_deducted

    @property
    def price_type(self):
        """Gets the price_type of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The price_type of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: PriceTypeDto
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this ServiceSpecificationGroupDto.


        :param price_type: The price_type of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: PriceTypeDto
        """
        if price_type is None:
            raise ValueError("Invalid value for `price_type`, must not be `None`")  # noqa: E501

        self._price_type = price_type

    @property
    def short_text(self):
        """Gets the short_text of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The short_text of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._short_text

    @short_text.setter
    def short_text(self, short_text):
        """Sets the short_text of this ServiceSpecificationGroupDto.


        :param short_text: The short_text of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: str
        """

        self._short_text = short_text

    @property
    def comission_status(self):
        """Gets the comission_status of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The comission_status of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: ComissionStatusDto
        """
        return self._comission_status

    @comission_status.setter
    def comission_status(self, comission_status):
        """Sets the comission_status of this ServiceSpecificationGroupDto.


        :param comission_status: The comission_status of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: ComissionStatusDto
        """
        if comission_status is None:
            raise ValueError("Invalid value for `comission_status`, must not be `None`")  # noqa: E501

        self._comission_status = comission_status

    @property
    def item_number(self):
        """Gets the item_number of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The item_number of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: ItemNumberDto
        """
        return self._item_number

    @item_number.setter
    def item_number(self, item_number):
        """Sets the item_number of this ServiceSpecificationGroupDto.


        :param item_number: The item_number of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: ItemNumberDto
        """

        self._item_number = item_number

    @property
    def element_type(self):
        """Gets the element_type of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The element_type of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """Sets the element_type of this ServiceSpecificationGroupDto.


        :param element_type: The element_type of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: str
        """

        self._element_type = element_type

    @property
    def is_lot(self):
        """Gets the is_lot of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The is_lot of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_lot

    @is_lot.setter
    def is_lot(self, is_lot):
        """Sets the is_lot of this ServiceSpecificationGroupDto.


        :param is_lot: The is_lot of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: bool
        """
        if is_lot is None:
            raise ValueError("Invalid value for `is_lot`, must not be `None`")  # noqa: E501

        self._is_lot = is_lot

    @property
    def type(self):
        """Gets the type of this ServiceSpecificationGroupDto.  # noqa: E501


        :return: The type of this ServiceSpecificationGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceSpecificationGroupDto.


        :param type: The type of this ServiceSpecificationGroupDto.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceSpecificationGroupDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceSpecificationGroupDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
